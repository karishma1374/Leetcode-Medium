//UNBOUNDED KNAPSACK PROBLEM : DYNAMIC PROGRAMMING 



class Solution
{
  public:
    int coinChange(vector < int > & coins, int amount)
    {

      int n = coins.size();  
      long long t[n + 1][amount + 1];// dp matrix 
      
        
      for (int i = 0; i <= n; i++)//initialization of 1st column
      t[i][0] = 0;

      for (int j = 1; j <= amount; j++)//initialization of 1st row 
      t[0][j] = INT_MAX;

  
      for (int i = 1; i <= n; i++)//initialization of rest of the matrix
      for (int j = 1; j <= amount; j++) 
      {
          if (coins[i - 1] <= j)
            t[i][j] = min(1 + t[i][j - coins[i - 1]], t[i - 1][j]);//always remeber 1+
          
          else
            t[i][j] = t[i - 1][j];
       }
      
        
      if (t[n][amount] == INT_MAX) return -1;
        
      return t[n][amount];
    }
};