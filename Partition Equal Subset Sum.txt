/*USING DYNAMIC PROGRAMMING 

suggestions for those who want to learn this concept:Coursera has really good content on this

WORKING CODE: */


class Solution {
public:
    bool subsetsum(vector<int>&nums,int sum)//find one partion whose sum=total_arr_sum/2 the other partition automatically has equal sum 
    {
        int n=nums.size();
        int t[n+1][sum+1];// matrix dp 
        
        for(int i=0;i<n+1;i++)
        for(int j=0;j<sum+1;j++)
            {
                if(i==0) {t[i][j]= false;}
                if(j==0) {t[i][j]= true;}
            }
      
        
        for(int i=1;i<n+1;i++)
        for(int j=1;j<sum+1;j++)
            {
                if(nums[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-nums[i-1]]   || t[i-1][j];
                }
                else
                    t[i][j]=t[i-1][j];
            }
        
        return t[n][sum];
    }
    
    
    bool canPartition(vector<int>& nums) 
    {
        int n=nums.size(); int sum=0;
        
        for(int i=0;i<n;i++) sum=sum+nums[i];
      
        if(sum%2==1)  return false;    //sum is odd means equal partition impossible
        return subsetsum(nums,sum/2);  //else find partition whose sum=total_arr_sum/2  
    }
};

