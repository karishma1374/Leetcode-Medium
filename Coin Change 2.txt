/* Approach  to achieve DP Code should be:

step 1. recursive code 
step 2. memoization of recursive code
step 3. Dynamic Programming  : tabulation approach   */ 


//THIS IS A RECURSIVE CODE :  might give TLE but focus on concept      
class Solution {
public:
    int knapsack(vector<int>& coins,int amount,int n)//n is arrsize
    {
        if(n==0) return 0;
        if(amount==0) return 1;

        if(coins[n-1]>amount)
        {
            return   knapsack(coins,amount,n-1);
            
        }
        return knapsack(coins,amount-coins[n-1],n) + knapsack(coins,amount,n-1);

    }
    
    int change(int amount, vector<int>& coins)
    {
        int n= coins.size();
        
        if(amount==0) //jab koi amnt hi nhi chaiye to null arr se kaam chl jayega hence total ways =1;
        return 1;
        
        if(n==0)//jab coins hi nhi de rkhe aur amount mangoge to kaise kaam chalega bhai hence totalways=0
        return 0;
        
       return knapsack(coins,amount,n);
    }
};







//THIS IS MEMOIZED CODE :
class Solution {
public:
    vector<vector<int>> t;
    int coinChange(vector<int>& coins,  int amount, int n)
    {
        if(n==0)
            return 0;
        if(amount == 0)
        {
            return 1;
        }
        if(t[n][amount] != -1)
        {
            return t[n][amount];
        }
        if(coins[n-1] > amount)
        {
            t[n][amount] = coinChange(coins, amount,n-1);
            return t[n][amount];
        }
        t[n][amount] = coinChange(coins, amount-coins[n-1],n) + coinChange(coins,  amount,n-1);
        return t[n][amount];
    }
    
    int change(int amount, vector<int>& coins)
    {
        int n = coins.size();
        if(amount == 0) 
        {
            return 1;
        }
        if(n==0)
          return 0;
        
        t.resize(n+2,vector<int>(amount+2,-1));
        
        t[n][amount] = coinChange(coins,  amount , n);
        return t[n][amount];
        
    }
};








//DYNAMIC PROGRAMMING CODE :
class Solution {
public:
    
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        if(amount == 0) return 1;
        if(n==0) return 0;
        
        vector<vector<int>>t;
        
        t.resize(n+2,vector<int>(amount+2,-1));
        
        for(int i=0;i<n+1;i++)
        {
            t[i][0] = 1;
        }
        
        for(int i=0;i<amount+1;i++)
        {
            t[0][i] = 0;
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<amount+1;j++)
            {
                if(coins[i-1] > j)
                {
                    t[i][j] = t[i-1][j];
                } 
                else
                {
                    t[i][j] = t[i-1][j]+t[i][j-coins[i-1]];
                }
            }
        }
        return t[n][amount];
        
    }
};

