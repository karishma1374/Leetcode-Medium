//373
//we have used heap concept 
//We'll store data in heap in the form of "pair<int,pair<int,int>>" i.e., {sum,(x,y)}


class Solution {
public:
 
    vector<vector<int>> kSmallestPairs(vector<int>& n1, vector<int>& n2, int k)
    {
        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>> >q;       
         
        for(int i=0;i<n1.size();i++)
            for(int j=0;j<n2.size();j++)
            {        
                q.push(make_pair(n1[i]+n2[j],make_pair(n1[i],n2[j]))); 
            }
        
        vector<vector<int>> ans;
        
        while(k && !q.empty())   
        {
            vector<int>temp;
            int x,y;
            x=q.top().second.first;
            y=q.top().second.second;
            q.pop();
            temp.push_back(x);
            temp.push_back(y);
            ans.push_back(temp);
            k--;
        }

        return ans;
    }
};
