/* USING DYNAMIC PROGRAMMING 

SIMILAR TO SUBSET SUM PROBLEM JUST FIGURE OUT THE MINIMUM  DIFFERENCE 

WORKING CODE: */




class Solution {
public:
    
    int lastStoneWeightII(vector<int>& stones) {
        
        int n=stones.size(); 
        int range=0; //range is nothing but total sum range from 0 to ------>range 
        
        for(int i=0;i<n;i++)
          range=range+stones[i];
        
        int t[n+1][range+1];
        
        for(int i=0;i<n+1;i++)
        for(int j=0;j<range+1;j++)
            {
                if(i==0) {t[i][j]= false;}
                if(j==0) {t[i][j]= true;}
            }
      
        
        for(int i=1;i<n+1;i++)
        for(int j=1;j<range+1;j++)
            {
                if(stones[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-stones[i-1]]   || t[i-1][j];
                }
                else
                    t[i][j]=t[i-1][j];
            }
        
        
        
      for(int i=range/2;i>=0;i--)
      {
            if(t[stones.size()][i])
            {
                return range - 2*i;
            }
        }
        return range;
    }
};

