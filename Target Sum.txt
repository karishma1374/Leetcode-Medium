//494

/*same problem as "COUNT THE NUMBER OF SUBSETS WITH GIVEN DIFFERENCE "

1. By multiplying pow(2,count), it will consider all the subsets of 0 which was not considered earlier.
2. one more condition needs to be checked i.e.if((S+sum)%2!=0)  then  we would never get the difference S by partitioning the array into two subsets.
3. zeroes cant be allowed in the array 
4. if sum of array+diff is odd just return zero*/

class Solution{
public:
    
    int findTargetSumWays(vector<int>& nums, int S)
    {
        int count=0;
        int n=nums.size();
        int arrsum=0;//arraysum
        
        for(int i=0;i<n;i++)
         {
            arrsum=arrsum+nums[i];
            if(nums[i]==0)
                count = count+1;
        }
       
        if(S > arrsum)
            return 0;
        if((S+arrsum)%2!=0)
            return 0;
        
        
        
        int sum=(S+arrsum)/2;//target sum 
        int t[n+1][sum+1];//dp matrix  based on target sum
        
        for(int i=0;i<n+1;i++)
        for(int j=0;j<sum+1;j++)
            {
                if(i==0) {t[i][j]= false;}
                if(j==0) {t[i][j]= true;}
            }
      
        
        for(int i=1;i<n+1;i++)
        for(int j=1;j<sum+1;j++)
            {
                if(nums[i-1]==0)
                {
                    t[i][j] = t[i-1][j];
                }
                else if(nums[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-nums[i-1]]   + t[i-1][j];
                }
                else
                    t[i][j]=t[i-1][j];
            }
        return pow(2,count)*t[n][sum];
    }
};

